library(MASS)
full_model.step.bic <-
stepAIC(full_model, direction = "backward", k=log(1000), trace = 0)
model.bic <- eval(full_model.step.bic$call)
summary(model.bic)
full_model.step.aic <-
stepAIC(full_model, direction = "backward", k=7, trace = 0)
model.aic <- eval(full_model.step.aic$call)
summary(model.aic)
# model.matrix() returns the design matrix X
# remove the bias column (all 1s)
X <- model.matrix(price ~ ., houses_df)[, -1]
y <- houses_df$price
new_houses_df = data.frame(X, y)
names(new_houses_df)[names(new_houses_df) == "y"] <- "price"
# alpha = 1 is lasso regression
fit_lasso <- glmnet(X, y, alpha = 1)
fit_lasso = glmnet(X, y, alpha = 1, lambda = 9000)
# [-c(1)] removes "intercept"
selected_predictors = rownames(coef(fit_lasso, s = 'lambda.min'))[coef(fit_lasso, s = 'lambda.min')[,1]!= 0][-c(1)]
cat(selected_predictors, sep="   ")
# Paste the selected predictors into a formula string
right_hand_side = paste(selected_predictors, collapse=" + ")
formula_string = paste("price ~", right_hand_side, collapse = "")
linear = lm(formula_string, data=new_houses_df)
summary(linear)
hist(houses_df$price,
main="The house prices are positively skewed",
xlab="House price")
abline(v=mean(houses_df$price),col="blue")
mean_price = format(round(mean(houses_df$price), 0), nsmall=0, big.mark=",")
text(4e+05, 200, paste("Mean: $", mean_price), cex=1.5)
for (predictor in selected_predictors) {
plot(price ~ eval(parse(text = predictor)),
data=new_houses_df,
xlab=predictor,
main=predictor)
predictor_linear = lm(price ~ eval(parse(text = predictor)), data=new_houses_df)
abline(predictor_linear, lwd = 3, lty = 1, col = "blue")
}
df_numeric = dplyr::select_if(new_houses_df[,c(selected_predictors, "price")], is.numeric)
# returns the correlation of each predictor with house price
corr_with_price = cor(df_numeric)[,"price"]
corr_with_price_ordered = as.data.frame(corr_with_price[order(-corr_with_price)])
colnames(corr_with_price_ordered) = "Correlation"
corr_with_price_ordered
vif(linear)
# Used to plot the correlations in the pair plot
panel.cor <- function(x, y) {
usr <- par("usr")
on.exit(par("usr"))
par(usr = c(0, 1, 0, 1))
r <- round(cor(x, y), digits = 2)
# text size
text(0.5, 0.5, r, cex=1.5)
}
pairs(~ Garage.Cars + Garage.Area + Total.Bsmt.SF + X1st.Flr.SF, data=new_houses_df, upper.panel=panel.cor)
sprintf("[Garage.Area - Price] Correlation: %.2f", cor(new_houses_df$Garage.Area, new_houses_df$price))
sprintf("[Garage.Cars - Price] Correlation: %.2f", cor(new_houses_df$Garage.Cars, new_houses_df$price))
sprintf("[Total.Bsmt.SF - Price] Correlation: %.2f", cor(new_houses_df$Total.Bsmt.SF, new_houses_df$price))
sprintf("[X1st.Flr.SF - Price] Correlation: %.2f", cor(new_houses_df$X1st.Flr.SF, new_houses_df$price))
predictors_subset = selected_predictors[-which(selected_predictors %in% c('Garage.Area', 'X1st.Flr.SF'))]
# Paste the new predictors into a formula string
right_hand_side = paste(predictors_subset, collapse=" + ")
formula_string = paste("price ~", right_hand_side, collapse = "")
linear= lm(formula_string, data=new_houses_df)
summary(linear)
print(vif(linear))
plot(linear, which=5)
new_houses_df[957, c("price", selected_predictors)]
resid(linear)[957]
new_houses_df = new_houses_df[-c(957), ]
linear = lm(formula_string, data=new_houses_df)
summary(linear)
plot(linear, which=5)
influential_indices = which(cooks.distance(linear) > 4 /
length(cooks.distance(linear)), arr.ind=TRUE)
length(influential_indices)
length(which(abs(rstandard(linear)) > 2))
length(which(hatvalues(linear) > 2 * mean(hatvalues(linear))))
press = sum((resid(linear) / (1 - hatvalues(linear)))^2) / nrow(new_houses_df)
loocv_rmse = sqrt(press)
format_loocv_rmse = format(round(loocv_rmse, 2), nsmall=1, big.mark=",")
paste("LOOCV RMSE: $", format_loocv_rmse)
sprintf("AIC: %.2f", AIC(linear))
sprintf("BIC: %.2f", BIC(linear))
sprintf("Adjusted R squared: %.2f", summary(linear)$adj.r.squared)
plot(fitted(linear), resid(linear), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Residual plot")
abline(h = 0, col = "darkorange", lwd = 2)
bptest(linear)
qqnorm(resid(linear))
qqline(resid(linear), col = "dodgerblue", lwd = 2)
shapiro.test(resid(linear))
lambdas = boxcox(linear, plot=FALSE)
best_lambda <- lambdas$x[which.max(lambdas$y)]
hist(houses_df$price ^ (best_lambda) - 1 / best_lambda, main="Box-Cox(House price) is roughly normally distributed", xlab="Box-Cox(House price)")
right_hand_side = paste(attr(linear$terms , "term.labels"), collapse="+")
formula_string = paste("((price ^ (best_lambda) - 1) / best_lambda) ~ ", right_hand_side, collapse = "")
linear_box = lm(as.formula(formula_string), data=new_houses_df)
summary(linear_box)
plot(linear_box, which=5)
influential_indices = which(cooks.distance(linear_box) > 4 /
length(cooks.distance(linear_box)), arr.ind=TRUE)
length(influential_indices)
outlier_indices = which(abs(rstandard(linear_box)) > 2)
length(outlier_indices)
length(which(hatvalues(linear_box) > 2 * mean(hatvalues(linear_box))))
y = new_houses_df$price
y_pred = (best_lambda * fitted(linear_box) + 1) ** (1/best_lambda)
loocv_rmse = sqrt(sum(((y - y_pred) / (1 - hatvalues(linear_box)))^2) / nrow(new_houses_df))
format_loocv_rmse = format(round(loocv_rmse, 2), nsmall=1, big.mark=",")
paste("LOOCV RMSE: $", format_loocv_rmse)
sprintf("AIC: %.2f", AIC(linear_box))
sprintf("BIC: %.2f", BIC(linear_box))
sprintf("Adjusted R squared: %.2f", summary(linear_box)$adj.r.squared)
plot(fitted(linear_box), resid(linear_box), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Residual plot")
abline(h = 0, col = "darkorange", lwd = 2)
bptest(linear_box)
qqnorm(resid(linear_box))
qqline(resid(linear_box), col = "dodgerblue", lwd = 2)
shapiro.test(resid(linear_box))
year_linear = lm(price ~ Year.Built, data=new_houses_df)
year_quad = lm(price ~ Year.Built + I(Year.Built^2), data=new_houses_df)
new.data <- data.frame(Year.Built = seq(from = min(new_houses_df$Year.Built),
to = max(new_houses_df$Year.Built),
length.out = 200))
pred_year_quad <- predict(year_quad, newdata = new.data)
plot(price ~ Year.Built,
data=new_houses_df,
main="Non-linear relationship between \nyear built and house price")
abline(year_linear, lwd = 3, lty = 1, col = "blue")
lines(pred_year_quad ~ new.data$Year.Built, col = "red", lwd=3)
quality_linear = lm(price ~ Overall.Qual, data=new_houses_df)
quality_quad = lm(price ~ Overall.Qual + I(Overall.Qual^2), data=new_houses_df)
quality_cubic = lm(price ~ Overall.Qual + I(Overall.Qual^2) + I(Overall.Qual^3), data=new_houses_df)
new.data <- data.frame(Overall.Qual = seq(from = min(new_houses_df$Overall.Qual),
to = max(new_houses_df$Overall.Qual),
length.out = 200))
pred_quality_quad <- predict(quality_quad, newdata = new.data)
pred_quality_cubic <- predict(quality_cubic, newdata = new.data)
plot(price ~ Overall.Qual,
data=new_houses_df,
main="Non-linear relationship between \n construction quality and house price")
abline(quality_linear, lwd = 3, lty = 1, col = "blue")
lines(pred_quality_quad ~ new.data$Overall.Qual, col = "red", lwd=3)
lines(pred_quality_cubic ~ new.data$Overall.Qual, col = "green", lwd=3)
area_neigh = lm(price ~ area + NeighborhoodNridgHt + area:NeighborhoodNridgHt, data = new_houses_df)
beta_hats = coef(area_neigh)
int_not_neigh = beta_hats[1]
slope_not_neigh = beta_hats[2]
int_neigh = beta_hats[1] + beta_hats[3]
slope_neigh = beta_hats[2] + beta_hats[4]
plot(price ~ area,
data = new_houses_df,
col = alpha(NeighborhoodNridgHt + 1, 0.5), pch=20, cex = 1,
main="Neighborhood and floor area interact")
abline(int_not_neigh, slope_not_neigh, col = 1, lty = 1, lwd = 2)
abline(int_neigh, slope_neigh, col = 2, lty = 2, lwd = 2)
legend("topleft", c("Northridge Heights", "Other"), pch=20, col = c(2, 1))
qplot(area, price,
colour=Overall.Qual,
main="Construction quality and floor area interact",
data = new_houses_df)
right_hand_side = paste(c(attr(linear$terms , "term.labels"),
"I(Year.Built^2)",
"I(Overall.Qual^2)",
"I(Overall.Qual^3)",
"NeighborhoodNridgHt:area",
"Overall.Qual:area"),
collapse="+")
formula_string = paste("((price ^ (best_lambda) - 1) / best_lambda) ~ ", right_hand_side, collapse = "")
linear_interact = lm(as.formula(formula_string), data=new_houses_df)
summary(linear_interact)
anova(linear_box, linear_interact)
plot(linear_interact, which=5)
influential_indices = which(cooks.distance(linear_interact) > 4 /
length(cooks.distance(linear_interact)), arr.ind=TRUE)
length(influential_indices)
length(which(abs(rstandard(linear_interact)) > 2))
length(which(hatvalues(linear_interact) > 2 * mean(hatvalues(linear_interact))))
y = new_houses_df$price
y_pred = (best_lambda * fitted(linear_interact) + 1) ** (1/best_lambda)
loocv_rmse = sqrt(sum(((y - y_pred) / (1 - hatvalues(linear_interact)))^2) / nrow(new_houses_df))
format_loocv_rmse = format(round(loocv_rmse, 2), nsmall=1, big.mark=",")
paste("LOOCV RMSE: $", format_loocv_rmse)
sprintf("AIC: %.2f", AIC(linear_interact))
sprintf("BIC: %.2f", BIC(linear_interact))
sprintf("Adjusted R squared: %.2f", summary(linear_interact)$adj.r.squared)
plot(fitted(linear_interact), resid(linear_interact), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Residual plot")
abline(h = 0, col = "darkorange", lwd = 2)
bptest(linear_interact)
qqnorm(resid(linear_interact))
qqline(resid(linear_interact), col = "dodgerblue", lwd = 2)
shapiro.test(resid(linear_interact))
y = new_houses_df$price
y_pred = (best_lambda * fitted(linear_interact) + 1) ** (1/best_lambda)
(sum(abs(y - y_pred)))/nrow(new_houses_df)
e_cv_linear = numeric(nrow(new_houses_df))
for (i in 1:nrow(new_houses_df))
{
# Remove the ith observation
training_data <- new_houses_df[-i, ]
# Fit models using training_data
cv_linear <- lm(as.formula(formula_string), data=training_data)
y_pred = (best_lambda * predict(cv_linear, newdata = new_houses_df[i, ]) + 1) ** (1/best_lambda)
# Prediction for the ith observation and obtain the residual
e_cv_linear[i] <- new_houses_df[i, "price"] - y_pred
}
sum(abs(e_cv_linear))/nrow(new_houses_df)
library(tidyverse)
library(dplyr)
library(tibble)
library(glmnet)
library(reshape2)
library(faraway)
library(lmtest)
library(ggplot2)
library(MASS)
houses_df = read.csv("ames_houses_data.csv")
# The professor asked us to only use the first 1000 observations
houses_df = houses_df[1:1000,]
sprintf("The dataset has %d rows", nrow(houses_df))
sprintf("The dataset has %d columns", ncol(houses_df))
head(houses_df)
# Remove columns with missing values
houses_df = houses_df[ , colSums(is.na(houses_df)) == 0]
# Remove Pool.Area since all its values are "0"
houses_df = houses_df[ , !(names(houses_df) %in% c("Pool.Area"))]
sprintf("The dataset has %d rows", nrow(houses_df))
sprintf("The dataset has %d columns", ncol(houses_df))
houses_df[sapply(houses_df, is.character)] <- lapply(houses_df[sapply(houses_df, is.character)], as.factor)
index <- sample(seq_len(nrow(houses_df)), size = 0.8 * nrow(houses_df))
X_train <- houses_df[index, ]
X_test <- houses_df[-index, ]
full_model <- lm(price ~ . -PID -price, data = X_train)
library(MASS)
full_model.step.bic <-
stepAIC(full_model, direction = "backward", k=log(1000), trace = 0)
model.bic <- eval(full_model.step.bic$call)
summary(model.bic)
full_model.step.aic <-
stepAIC(full_model, direction = "backward", k=7, trace = 0)
model.aic <- eval(full_model.step.aic$call)
summary(model.aic)
# model.matrix() returns the design matrix X
# remove the bias column (all 1s)
X <- model.matrix(price ~ ., houses_df)[, -1]
y <- houses_df$price
new_houses_df = data.frame(X, y)
names(new_houses_df)[names(new_houses_df) == "y"] <- "price"
# alpha = 1 is lasso regression
fit_lasso <- glmnet(X, y, alpha = 1)
fit_lasso = glmnet(X, y, alpha = 1, lambda = 9000)
# [-c(1)] removes "intercept"
selected_predictors = rownames(coef(fit_lasso, s = 'lambda.min'))[coef(fit_lasso, s = 'lambda.min')[,1]!= 0][-c(1)]
cat(selected_predictors, sep="   ")
# Paste the selected predictors into a formula string
right_hand_side = paste(selected_predictors, collapse=" + ")
formula_string = paste("price ~", right_hand_side, collapse = "")
linear = lm(formula_string, data=new_houses_df)
summary(linear)
hist(houses_df$price,
main="The house prices are positively skewed",
xlab="House price")
abline(v=mean(houses_df$price),col="blue")
mean_price = format(round(mean(houses_df$price), 0), nsmall=0, big.mark=",")
text(4e+05, 200, paste("Mean: $", mean_price), cex=1.5)
for (predictor in selected_predictors) {
plot(price ~ eval(parse(text = predictor)),
data=new_houses_df,
xlab=predictor,
main=predictor)
predictor_linear = lm(price ~ eval(parse(text = predictor)), data=new_houses_df)
abline(predictor_linear, lwd = 3, lty = 1, col = "blue")
}
df_numeric = dplyr::select_if(new_houses_df[,c(selected_predictors, "price")], is.numeric)
# returns the correlation of each predictor with house price
corr_with_price = cor(df_numeric)[,"price"]
corr_with_price_ordered = as.data.frame(corr_with_price[order(-corr_with_price)])
colnames(corr_with_price_ordered) = "Correlation"
corr_with_price_ordered
vif(linear)
# Used to plot the correlations in the pair plot
panel.cor <- function(x, y) {
usr <- par("usr")
on.exit(par("usr"))
par(usr = c(0, 1, 0, 1))
r <- round(cor(x, y), digits = 2)
# text size
text(0.5, 0.5, r, cex=1.5)
}
pairs(~ Garage.Cars + Garage.Area + Total.Bsmt.SF + X1st.Flr.SF, data=new_houses_df, upper.panel=panel.cor)
sprintf("[Garage.Area - Price] Correlation: %.2f", cor(new_houses_df$Garage.Area, new_houses_df$price))
sprintf("[Garage.Cars - Price] Correlation: %.2f", cor(new_houses_df$Garage.Cars, new_houses_df$price))
sprintf("[Total.Bsmt.SF - Price] Correlation: %.2f", cor(new_houses_df$Total.Bsmt.SF, new_houses_df$price))
sprintf("[X1st.Flr.SF - Price] Correlation: %.2f", cor(new_houses_df$X1st.Flr.SF, new_houses_df$price))
predictors_subset = selected_predictors[-which(selected_predictors %in% c('Garage.Area', 'X1st.Flr.SF'))]
# Paste the new predictors into a formula string
right_hand_side = paste(predictors_subset, collapse=" + ")
formula_string = paste("price ~", right_hand_side, collapse = "")
linear= lm(formula_string, data=new_houses_df)
summary(linear)
print(vif(linear))
plot(linear, which=5)
new_houses_df[957, c("price", selected_predictors)]
resid(linear)[957]
new_houses_df = new_houses_df[-c(957), ]
linear = lm(formula_string, data=new_houses_df)
summary(linear)
plot(linear, which=5)
influential_indices = which(cooks.distance(linear) > 4 /
length(cooks.distance(linear)), arr.ind=TRUE)
length(influential_indices)
length(which(abs(rstandard(linear)) > 2))
length(which(hatvalues(linear) > 2 * mean(hatvalues(linear))))
press = sum((resid(linear) / (1 - hatvalues(linear)))^2) / nrow(new_houses_df)
loocv_rmse = sqrt(press)
format_loocv_rmse = format(round(loocv_rmse, 2), nsmall=1, big.mark=",")
paste("LOOCV RMSE: $", format_loocv_rmse)
sprintf("AIC: %.2f", AIC(linear))
sprintf("BIC: %.2f", BIC(linear))
sprintf("Adjusted R squared: %.2f", summary(linear)$adj.r.squared)
plot(fitted(linear), resid(linear), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Residual plot")
abline(h = 0, col = "darkorange", lwd = 2)
bptest(linear)
qqnorm(resid(linear))
qqline(resid(linear), col = "dodgerblue", lwd = 2)
shapiro.test(resid(linear))
lambdas = boxcox(linear, plot=FALSE)
best_lambda <- lambdas$x[which.max(lambdas$y)]
hist(houses_df$price ^ (best_lambda) - 1 / best_lambda, main="Box-Cox(House price) is roughly normally distributed", xlab="Box-Cox(House price)")
right_hand_side = paste(attr(linear$terms , "term.labels"), collapse="+")
formula_string = paste("((price ^ (best_lambda) - 1) / best_lambda) ~ ", right_hand_side, collapse = "")
linear_box = lm(as.formula(formula_string), data=new_houses_df)
summary(linear_box)
plot(linear_box, which=5)
influential_indices = which(cooks.distance(linear_box) > 4 /
length(cooks.distance(linear_box)), arr.ind=TRUE)
length(influential_indices)
outlier_indices = which(abs(rstandard(linear_box)) > 2)
length(outlier_indices)
length(which(hatvalues(linear_box) > 2 * mean(hatvalues(linear_box))))
y = new_houses_df$price
y_pred = (best_lambda * fitted(linear_box) + 1) ** (1/best_lambda)
loocv_rmse = sqrt(sum(((y - y_pred) / (1 - hatvalues(linear_box)))^2) / nrow(new_houses_df))
format_loocv_rmse = format(round(loocv_rmse, 2), nsmall=1, big.mark=",")
paste("LOOCV RMSE: $", format_loocv_rmse)
sprintf("AIC: %.2f", AIC(linear_box))
sprintf("BIC: %.2f", BIC(linear_box))
sprintf("Adjusted R squared: %.2f", summary(linear_box)$adj.r.squared)
plot(fitted(linear_box), resid(linear_box), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Residual plot")
abline(h = 0, col = "darkorange", lwd = 2)
bptest(linear_box)
qqnorm(resid(linear_box))
qqline(resid(linear_box), col = "dodgerblue", lwd = 2)
shapiro.test(resid(linear_box))
year_linear = lm(price ~ Year.Built, data=new_houses_df)
year_quad = lm(price ~ Year.Built + I(Year.Built^2), data=new_houses_df)
new.data <- data.frame(Year.Built = seq(from = min(new_houses_df$Year.Built),
to = max(new_houses_df$Year.Built),
length.out = 200))
pred_year_quad <- predict(year_quad, newdata = new.data)
plot(price ~ Year.Built,
data=new_houses_df,
main="Non-linear relationship between \nyear built and house price")
abline(year_linear, lwd = 3, lty = 1, col = "blue")
lines(pred_year_quad ~ new.data$Year.Built, col = "red", lwd=3)
quality_linear = lm(price ~ Overall.Qual, data=new_houses_df)
quality_quad = lm(price ~ Overall.Qual + I(Overall.Qual^2), data=new_houses_df)
quality_cubic = lm(price ~ Overall.Qual + I(Overall.Qual^2) + I(Overall.Qual^3), data=new_houses_df)
new.data <- data.frame(Overall.Qual = seq(from = min(new_houses_df$Overall.Qual),
to = max(new_houses_df$Overall.Qual),
length.out = 200))
pred_quality_quad <- predict(quality_quad, newdata = new.data)
pred_quality_cubic <- predict(quality_cubic, newdata = new.data)
plot(price ~ Overall.Qual,
data=new_houses_df,
main="Non-linear relationship between \n construction quality and house price")
abline(quality_linear, lwd = 3, lty = 1, col = "blue")
lines(pred_quality_quad ~ new.data$Overall.Qual, col = "red", lwd=3)
lines(pred_quality_cubic ~ new.data$Overall.Qual, col = "green", lwd=3)
area_neigh = lm(price ~ area + NeighborhoodNridgHt + area:NeighborhoodNridgHt, data = new_houses_df)
beta_hats = coef(area_neigh)
int_not_neigh = beta_hats[1]
slope_not_neigh = beta_hats[2]
int_neigh = beta_hats[1] + beta_hats[3]
slope_neigh = beta_hats[2] + beta_hats[4]
plot(price ~ area,
data = new_houses_df,
col = alpha(NeighborhoodNridgHt + 1, 0.5), pch=20, cex = 1,
main="Neighborhood and floor area interact")
abline(int_not_neigh, slope_not_neigh, col = 1, lty = 1, lwd = 2)
abline(int_neigh, slope_neigh, col = 2, lty = 2, lwd = 2)
legend("topleft", c("Northridge Heights", "Other"), pch=20, col = c(2, 1))
qplot(area, price,
colour=Overall.Qual,
main="Construction quality and floor area interact",
data = new_houses_df)
right_hand_side = paste(c(attr(linear$terms , "term.labels"),
"I(Year.Built^2)",
"I(Overall.Qual^2)",
"I(Overall.Qual^3)",
"NeighborhoodNridgHt:area",
"Overall.Qual:area"),
collapse="+")
formula_string = paste("((price ^ (best_lambda) - 1) / best_lambda) ~ ", right_hand_side, collapse = "")
linear_interact = lm(as.formula(formula_string), data=new_houses_df)
summary(linear_interact)
plot(linear_interact, which=5)
influential_indices = which(cooks.distance(linear_interact) > 4 /
length(cooks.distance(linear_interact)), arr.ind=TRUE)
length(influential_indices)
length(which(abs(rstandard(linear_interact)) > 2))
length(which(hatvalues(linear_interact) > 2 * mean(hatvalues(linear_interact))))
y = new_houses_df$price
y_pred = (best_lambda * fitted(linear_interact) + 1) ** (1/best_lambda)
loocv_rmse = sqrt(sum(((y - y_pred) / (1 - hatvalues(linear_interact)))^2) / nrow(new_houses_df))
format_loocv_rmse = format(round(loocv_rmse, 2), nsmall=1, big.mark=",")
paste("LOOCV RMSE: $", format_loocv_rmse)
sprintf("AIC: %.2f", AIC(linear_interact))
sprintf("BIC: %.2f", BIC(linear_interact))
sprintf("Adjusted R squared: %.2f", summary(linear_interact)$adj.r.squared)
plot(fitted(linear_interact), resid(linear_interact), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Residual plot")
abline(h = 0, col = "darkorange", lwd = 2)
bptest(linear_interact)
qqnorm(resid(linear_interact))
qqline(resid(linear_interact), col = "dodgerblue", lwd = 2)
shapiro.test(resid(linear_interact))
y = new_houses_df$price
y_pred = (best_lambda * fitted(linear_interact) + 1) ** (1/best_lambda)
(sum(abs(y - y_pred)))/nrow(new_houses_df)
e_cv_linear = numeric(nrow(new_houses_df))
for (i in 1:nrow(new_houses_df))
{
# Remove the ith observation
training_data <- new_houses_df[-i, ]
# Fit models using training_data
cv_linear <- lm(as.formula(formula_string), data=training_data)
y_pred = (best_lambda * predict(cv_linear, newdata = new_houses_df[i, ]) + 1) ** (1/best_lambda)
# Prediction for the ith observation and obtain the residual
e_cv_linear[i] <- new_houses_df[i, "price"] - y_pred
}
sum(abs(e_cv_linear))/nrow(new_houses_df)
library(tidyverse)
library(dplyr)
library(tibble)
library(glmnet)
library(reshape2)
library(faraway)
library(lmtest)
library(ggplot2)
library(MASS)
houses_df = read.csv("ames_houses_data.csv")
# The professor asked us to only use the first 1000 observations
houses_df = houses_df[1:1000,]
sprintf("The dataset has %d rows", nrow(houses_df))
sprintf("The dataset has %d columns", ncol(houses_df))
head(houses_df)
# Remove columns with missing values
houses_df = houses_df[ , colSums(is.na(houses_df)) == 0]
# Remove Pool.Area since all its values are "0"
houses_df = houses_df[ , !(names(houses_df) %in% c("Pool.Area"))]
sprintf("The dataset has %d rows", nrow(houses_df))
sprintf("The dataset has %d columns", ncol(houses_df))
houses_df[sapply(houses_df, is.character)] <- lapply(houses_df[sapply(houses_df, is.character)], as.factor)
index <- sample(seq_len(nrow(houses_df)), size = 0.8 * nrow(houses_df))
X_train <- houses_df[index, ]
X_test <- houses_df[-index, ]
full_model <- lm(price ~ . -PID -price, data = X_train)
library(MASS)
full_model.step.bic <-
stepAIC(full_model, direction = "backward", k=log(1000), trace = 0)
model.bic <- eval(full_model.step.bic$call)
summary(model.bic)
full_model.step.aic <-
stepAIC(full_model, direction = "backward", k=7, trace = 0)
model.aic <- eval(full_model.step.aic$call)
summary(model.aic)
full_model.step.aic <-
stepAIC(full_model, direction = "backward", k=7, trace = 0)
model.aic <- eval(full_model.step.aic$call)
summary(model.aic)
full_model.step.aic <-
stepAIC(full_model, direction = "backward", k=1000, trace = 0)
model.aic <- eval(full_model.step.aic$call)
summary(model.aic)
full_model.step.aic <-
stepAIC(full_model, direction = "backward", k=100, trace = 0)
model.aic <- eval(full_model.step.aic$call)
summary(model.aic)
full_model.step.aic <-
stepAIC(full_model, direction = "backward", k=20, trace = 0)
model.aic <- eval(full_model.step.aic$call)
summary(model.aic)
full_model.step.aic <-
stepAIC(full_model, direction = "backward", k=7, trace = 0)
model.aic <- eval(full_model.step.aic$call)
summary(model.aic)
full_model.step.aic <-
stepAIC(full_model, direction = "backward", trace = 0)
model.aic <- eval(full_model.step.aic$call)
summary(model.aic)
full_model.step.aic <-
stepAIC(full_model, direction = "backward", k=7, trace = 0)
model.aic <- eval(full_model.step.aic$call)
summary(model.aic)
